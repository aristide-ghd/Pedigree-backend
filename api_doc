Enregistrer un Utilisateur

    Méthode : POST
    URL : http://localhost:5000/api/utilisateurs/enregistrer
    Headers :
        Content-Type: application/json
    Body (raw, JSON) :

    json
    (si un utilisateur voulant s\inscrire appartient à une famille nn enrégistrer)
    {
      "nom": "",
      "prenom": "",
      "sexe": "",
      "email": "john@example.com",
      "mot_de_passe": "12345678",
      "newFamille": {
        "family_name": "",
        "ethnicity": "",
        "country": "",
        "village": "",
        "_id": "",
        "__v": 0
      },
      "fam_exist": false
    }

    Réponse attendue :

    json

        {
          "Message": "Utilisateur enregistré avec succès",
          "fam_owner": true
        }
    (si un utilisateur voulant s\inscrire appartient à une famille déja enrégistrer)
        {
          "nom": "",
          "prenom": "",
          "sexe": "",
          "email": "john@example.com",
          "mot_de_passe": "12345678",
          "family_name": "",
          "fam_exist": true,
          "idFamille": ""
        }

    Réponse attendue :

    json

    {
      "Message": "Utilisateur enregistré avec succès",
      "fam_owner": false
    }

Afficher Tous les Utilisateurs

    Méthode : GET
    URL : http://localhost:5000/api/utilisateurs/tous
    Réponse attendue :

    json

    [
      {
        "_id": "60c72b2f9b1e8a5f6d6a15f9",
        "nom": "John",
        "email": "john@example.com",
        "mot_de_passe": "$2a$10$...",
        "__v": 0
      }
      // Autres utilisateurs
    ]

Modifier un Utilisateur par Email

    Méthode : PUT
    URL : http://localhost:5000/api/utilisateurs/modifier/:email

        Remplace ":email" par l'email de l'utilisateur à modifier.
    Headers :
        Content-Type: application/json
    Body (raw, JSON) :

    json

    {
      "nom": "John Doe"
      //Autres informations 
    }

    Réponse attendue :

    json

        {
          "message": "Utilisateur modifié avec succès"
        }

Connecter un Utilisateur

    Méthode : POST
    URL : http://localhost:5000/api/utilisateurs/connecter
    Headers :
        Content-Type: application/json
    Body (raw, JSON) :

    json

    {
      "email": "john@example.com",
      "mot_de_passe": "12345678"
    }

    Réponse attendue :

    json

        {
          "message": "Connexion réussie",
          "date": {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "expiresIn": "12h",
            "expirationTime": "2023-07-23T12:00:00.000Z"
          }
        }


Recuperer le profil d'un 'utilisateur

    Méthode : GET
    URL : http://localhost:5000/api/utilisateurs/profile
    Headers :
        Content-Type: application/json
        Authorization: Bearer [token]

        Ajouter le token généré lors de la connexion

    Réponse attendue

    "user": 
    {
        "_id": "",
        "nom": "",
        "prenom": "",
        "email": "",
        "sexe": "",
        "mot_de_passe": "",
        "__v": 0
    }


Ajouter un Membre

    Méthode : POST
    URL : http://localhost:5000/api/membres/ajouter
    Headers :
        Content-Type: application/json
        Authorization: Bearer [token]

        Ajouter le token généré lors de la connexion
    Body (raw, JSON) :

    json

    {
      "nom": "Jane Doe",
      "prenom": "jack",
      "sexe": "Femme",
      "autres_informations": "Informations supplémentaires"
    }

    Réponse attendue :

    json

        {
          "Message": "Membre enregistré avec succès"
        }

Afficher Tous les Membres pour un Utilisateur

    URL : http://localhost:5000/api/membres/tous
    Méthode : GET
        Sans filtre : /api/membres/tous
        Filtrer par sexe : /api/membres/tous?sexe=Masculin
        Filtrer par type de lien : /api/membres/tous?type_de_lien=Fils
        Filtrer par sexe et type de lien : /api/membres/tous?sexe=Masculin&type_de_lien=Fils
    Headers :
        Authorization: Bearer [token]
    Query Params :
        sexe: Masculin, Féminin ou Autre 
        type_de_lien: Fils (ou tout autre type de lien)

    Réponse attendue :

    json

    [
      {
        "_id": "60c72b2f9b1e8a5f6d6a15f9",
        "nom": "Jane Doe",
        "prenom": "",
        "sexe": "Femme",
        "autres_informations": "Informations supplémentaires",
        "id_user": "60c72b2f9b1e8a5f6d6a15f8",
        "__v": 0
      }
      // Autres membres en fonction du sexe et du type_de_lien
    ]

Afficher un Membre par ID

    Méthode : GET
    URL : http://localhost:5000/api/membres/afficher/:id

        Remplace ":id" par ID du membre à afficher.
    Headers :
        Content-Type: application/json
        Authorization: Bearer [token]

      Réponse attendue :

      json

      {
        "message": "Membre trouvé avec succès",
        "data":   
              {
                "nom": "",
                "prenom": "",
                "sexe": "",
                "date_de_naissance": "2003-04-02T23:00:00.000Z",
                "statut_matrimonial": "Celibataire",
                "id_pere": "",
                "id_mere": "",
                "profession": "",
                "religion": "",
                "groupe_sanguin": "",
                "signe_du_fa": "",
                "electrophorese": "",
                "id_user": "",
                "__v": 0
              }
      }

Modifier un Membre par ID

    Méthode : PUT
    URL : http://localhost:5000/api/membres/modifier/:id

        Remplace ":id" par ID du membre à modifier.
    Headers :
        Content-Type: application/json
        Authorization: Bearer [token]
    Body (raw, JSON) :

    json

      {
        "nom": "Jane Smith",
        "age": 31
      }

      Réponse attendue :

      json

          {
            "message": "Membre modifié avec succès"
          }

Récupérer les Membres par Sexe

    Méthode : GET
    URL : http://localhost:5000/api/membres/sexe/:sexe
        Remplace :sexe par "Homme" ou "Femme".
    Réponse attendue :

    json

    [
      {
        "_id": "60c72b2f9b1e8a5f6d6a15f9",
        "nom": "Jane Doe",
        "age": 30,
        "sexe": "Femme",
        "autres_informations": "Informations supplémentaires",
        "id_user": "60c72b2f9b1e8a5f6d6a15f8",
        "__v": 0
      }
      // Autres membres du même sexe
    ]

Obtenir les informations concernant les rôles et permission
  Méthode : GET
  URL : http://localhost:5000/api/UserRoles/All-Permision
  (pas de body nécessaire)

  Réponse:
  const Roles = [ {
    role: { id: "ADMIN", name: 'Role Administrateur'},
    permissions : [
        { id: 'add_members', name: 'ajouter un membre'},
        { id: 'death_declaration', name: 'declaration de décès'},
        { id: 'update_info', name: 'Modifier les infos des membres'},
        { id: 'overview', name: 'details des infos des membres'}
    ]
    },
    {
    role: {id : "USER", name: 'Role Utilisateur'},
    permissions: [
        { id: 'add_members', name: 'ajouter membre'},
        { id: 'view_profile', name: 'consulter son profil'},
        { id: 'view_common_info', name: 'voir certains details des membres'},
        { id: 'modify_myinfo', name: 'modifier mes informations'}
    ]
    }
];

Utilisation dans Postman

    Lancer Postman et sélectionner la méthode HTTP appropriée (POST, GET, PUT).
    Entrer l'URL de l'API.
    Ajouter les en-têtes nécessaires :
        Pour toutes les requêtes POST/PUT, ajoute l'en-tête Content-Type: application/json.
        Ajoute également l'en-tête Authorization: Bearer [token] si la route nécessite une authentification.
    Ajouter le corps de la requête pour les requêtes POST et PUT en choisissant "raw" et en sélectionnant "JSON".
    Envoyer la requête et vérifier la réponse dans la section "Body".
